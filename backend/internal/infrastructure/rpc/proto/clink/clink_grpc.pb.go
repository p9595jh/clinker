// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: internal/infrastructure/rpc/proto/clink/clink.proto

package clink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClinkClient is the client API for Clink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClinkClient interface {
	// backend -> layer
	VestigeCreate(ctx context.Context, in *VestigeCreateRequest, opts ...grpc.CallOption) (*TxHashResponse, error)
	AppraisalCreate(ctx context.Context, in *AppraisalCreateRequest, opts ...grpc.CallOption) (*TxHashResponse, error)
	// layer -> backend
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error)
}

type clinkClient struct {
	cc grpc.ClientConnInterface
}

func NewClinkClient(cc grpc.ClientConnInterface) ClinkClient {
	return &clinkClient{cc}
}

func (c *clinkClient) VestigeCreate(ctx context.Context, in *VestigeCreateRequest, opts ...grpc.CallOption) (*TxHashResponse, error) {
	out := new(TxHashResponse)
	err := c.cc.Invoke(ctx, "/clink.Clink/VestigeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinkClient) AppraisalCreate(ctx context.Context, in *AppraisalCreateRequest, opts ...grpc.CallOption) (*TxHashResponse, error) {
	out := new(TxHashResponse)
	err := c.cc.Invoke(ctx, "/clink.Clink/AppraisalCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clinkClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/clink.Clink/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClinkServer is the server API for Clink service.
// All implementations must embed UnimplementedClinkServer
// for forward compatibility
type ClinkServer interface {
	// backend -> layer
	VestigeCreate(context.Context, *VestigeCreateRequest) (*TxHashResponse, error)
	AppraisalCreate(context.Context, *AppraisalCreateRequest) (*TxHashResponse, error)
	// layer -> backend
	Confirm(context.Context, *ConfirmRequest) (*ConfirmResponse, error)
	mustEmbedUnimplementedClinkServer()
}

// UnimplementedClinkServer must be embedded to have forward compatible implementations.
type UnimplementedClinkServer struct {
}

func (UnimplementedClinkServer) VestigeCreate(context.Context, *VestigeCreateRequest) (*TxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VestigeCreate not implemented")
}
func (UnimplementedClinkServer) AppraisalCreate(context.Context, *AppraisalCreateRequest) (*TxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppraisalCreate not implemented")
}
func (UnimplementedClinkServer) Confirm(context.Context, *ConfirmRequest) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedClinkServer) mustEmbedUnimplementedClinkServer() {}

// UnsafeClinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClinkServer will
// result in compilation errors.
type UnsafeClinkServer interface {
	mustEmbedUnimplementedClinkServer()
}

func RegisterClinkServer(s grpc.ServiceRegistrar, srv ClinkServer) {
	s.RegisterService(&Clink_ServiceDesc, srv)
}

func _Clink_VestigeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VestigeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinkServer).VestigeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clink.Clink/VestigeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinkServer).VestigeCreate(ctx, req.(*VestigeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clink_AppraisalCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppraisalCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinkServer).AppraisalCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clink.Clink/AppraisalCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinkServer).AppraisalCreate(ctx, req.(*AppraisalCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clink_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClinkServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clink.Clink/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClinkServer).Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clink_ServiceDesc is the grpc.ServiceDesc for Clink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clink.Clink",
	HandlerType: (*ClinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VestigeCreate",
			Handler:    _Clink_VestigeCreate_Handler,
		},
		{
			MethodName: "AppraisalCreate",
			Handler:    _Clink_AppraisalCreate_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Clink_Confirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infrastructure/rpc/proto/clink/clink.proto",
}
